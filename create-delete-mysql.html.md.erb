---
title: Creating and Deleting MySQL Instances
owner: MySQL
---

This topic describes how to create and delete MySQL instances.

## <a id='prerequisites'></a>  Prerequisites

Before you can create or delete MySQL instances, you must have:

[//]: # (This partial contains a standard set of prereqs. Also used in high-availability topic.)
<%= partial '/prerequisites' %>

## <a id='download-templates'></a>  Download the Deployment Templates

In order to create <%= vars.product_full %> instances, you must first download the deployment templates from Tanzu Network.
You use these templates to create configuration files that specify the Tanzu MySQL for Kubernetes resources that you wish to create.

<p class='note'><strong>Note:</strong> You only need to download the templates once (before you first create a MySQL instance).</p>

To access the templates:

1. Log in to [<%= vars.product_network %>](https://network.tanzu.vmware.com/products/tanzu-application-platform/) and visit the [VMware MySQL Operator](https://network.tanzu.vmware.com/products/tanzu-mysql-for-kubernetes/) product page.

1. Visit the **<%= vars.product_full %>** product page.

1. Click **VMware Tanzu SQL with MySQL for Kubernetes v1.1.0**. This will download a .tgz archive file to your local machine.

1. Expand the downloaded .tgz file. Open the directory `tanzu-mysql-for-kubernetes-1.1.0`. The templates are located in the `samples` subdirectory.

The templates include the following:

* `backup.yaml` (for the MySQLBackup resource)
* `backuplocation.yaml` (for the MySQLBackupLocation resource)
* `backupschedule.yaml` (for the MySQLBackupSchedule resource)
* `mysql.yaml` (for the MySQL resource; this template is used to create MySQL instances)
* `restore.yaml` (for the MySQLRestore resource)
* `tls-secret.yaml` (for a [TLS Secret](https://kubernetes.io/docs/concepts/configuration/secret/#tls-secrets))

You do not need to download the **Artifact References** from the Tanzu MySQL for Kubernetes product page.

## <a id='create-instance'></a> Create a MySQL Instance

[//]: # (Note to authors: if you change step numbers in this procedure, edit high-availability topic.)

To create a MySQL instance:

1. Target the namespace where you want to create the MySQL instance:

    ```
    kubectl config set-context --current --namespace=DEVELOPMENT-NAMESPACE
    ```
    Where `DEVELOPMENT-NAMESPACE` is the namespace in which you want to create the instance.
    <br><br>
    For example:
    ``` 
    kubectl config set-context --current --namespace=my-namespace
    ``` 

2. From your namespace, Kubernetes must be able to access the registry
   that stores the <%= vars.product_short %> images.
   To allow this, create an imagePullSecret by running:

    ```
    kubectl --namespace=DEVELOPMENT-NAMESPACE create secret docker-registry tanzu-mysql-image-registry --docker-server=REGISTRY-SERVER-URL --docker-username=DOCKER-USERNAME --docker-password=DOCKER-PASSWORD
    ```
    Where:
    * `DEVELOPMENT-NAMESPACE` is the namespace in which you want to create the instance
    * `REGISTRY-SERVER-URL` is the <%= vars.product_network %> registry or the private registry configured for your environment
    * `DOCKER-USERNAME` and `DOCKER-PASSWORD` are the credentials used to pull images from the registry.

    For example:

    ``` 
    kubectl create secret --namespace=my-namespace \
    docker-registry tanzu-mysql-image-registry  \
    --docker-server=https://registry.tanzu.vmware.com/ \
    --docker-username=sample-username  \
    --docker-password=sample-password

    secret/tanzu-mysql-image-registry created
    ``` 

3. Find the `mysql.yaml` deployment template that you downloaded
   in the TGZ file from <%= vars.product_network %>.
   For how to download deployment templates, see [Download the Deployment Templates](#download-templates).

4. Create a copy of the `mysql.yaml` file and give it a unique name.
    <br><br>
    For example:

    ``` 
    cp ~/Downloads/tanzu-mysql-deployment-templates-1.0.0/samples/mysql.yaml testdb.yaml
    ``` 


5. Edit the file and customize the instance according to your requirements. 
    <br>
    You may customize your Tanzu MySQL instance version, instance resources, instance storage class, high availability, node affinity and tolerations, PVC retention policy, service type (ClusterIP or LoadBalancer), and TLS secret. For more details on all the properties that you can set for the MySQL resource, see [Property Reference for the MySQL Resource](property-reference-mysql.html).
    <br><br>
    When you create a MySQL instance, the MySQL Operator also creates PVCs. The PVCs are attached to the instance and contain the data for the MySQL database. Single-node instances have one PVC, and high-availability (HA) instances have three. The PVC name contains the instance name and the MySQL Pod number. The PVC name is of the form `mysql-data-INSTANCE-NAME-N`, for example `mysql-data-mysql-sample-0`.


6. Deploy a MySQL instance to Kubernetes by running:

    ```
    kubectl -n DEVELOPMENT-NAMESPACE apply -f FILENAME
    ```
    Where `FILENAME` is the name of the configuration file you created in Step 4 above.
    <br><br>
    For example:

    ``` 
    kubectl -n my-namespace apply -f testdb.yaml
    ```
    ```
    mysql.with.sql.tanzu.vmware.com/mysql-sample created
    ``` 


7. Verify that the instance was created successfully by running:

    ```
    kubectl -n DEVELOPMENT-NAMESPACE get mysql INSTANCE-NAME
    ```
    Where `INSTANCE-NAME` is the value that you configured for `metadata.name` in your file
    <br><br>
    For example:

    ``` 
    kubectl -n my-namespace get mysql mysql-sample
    ```
    ```
    NAME           READY   STATUS    AGE
    mysql-sample   true    Running   2m17s
    ``` 

By default, the MySQL servers created by Tanzu Operator 1.2.0 (and later) use TLS certificates provided by the cert-manager `ClusterIssuer`, using a self-signed certificate authority (CA). For more information on TLS and how to configure custom a `ClusterIssuer`, see [Configuring TLS for MySQL Instances](configure-tls.html). 
    
## <a id='delete-instance'></a> Delete a Tanzu MySQL Instance

This section provides some conceptual information about deleting an instance, and the procedure for how to delete an instance.

There are two steps to deleting an instance. The first step is to delete the instance itself, and the second step is to delete the PVCs.

There are situations where you want to delete the instance but not delete the PVC.
For example, in a test environment, you might delete the instance to save costs
but keep the PVC storing the data.
If you later create a new instance with the same name as the deleted instance,
the old PVCs automatically reattach to the new instance and you have access to your data again.

<p class="note">
   <strong>Note:</strong> If you delete the Pod or the StatefulSet associated
   with the MySQL resource, the Operator re-creates it for you.
   To permanently delete the instance, you need to delete the MySQL resource,
   as described in step 1 below.
</p>

### <a id="procedure"></a>  Procedure

To delete a MySQL instance:

1. Delete the MySQL instance by running:

    ```
    kubectl -n DEVELOPMENT-NAMESPACE delete mysql INSTANCE-NAME
    ```

    Where:
    * `DEVELOPMENT-NAMESPACE` is the namespace where you created the instance.
    * `INSTANCE-NAME` is the name of the instance you want to delete.

    For example:

    ``` 
    kubectl -n my-namespace delete mysql mysql-sample
    ```
    ```
    my-namespace "mysql-sample" deleted
    ``` 

2. (Optional) Delete the PVCs by running:

    <p class="note warning">
       <strong> Warning:</strong> This command is destructive.
       When you destroy your PVCs, you delete all data associated with your <%= vars.product_short %> database.
    </p>

    ```
    kubectl delete pvc -l app.kubernetes.io/instance=INSTANCE-NAME
    ```

    Where `INSTANCE-NAME` is the name of the MySQL instance that you deleted above.
    <br><br>
    For example:

    ``` 
    kubectl delete pvc -l app.kubernetes.io/instance=mysql-sample
    ```
    ```
    persistentvolumeclaim "mysql-data-mysql-sample-0" deleted
    ``` 

    <p class="note">
        <strong> Note:</strong> For HA MySQL instances, the command deletes
        all three PVCs associated with the MySQL instance.
    </p>
