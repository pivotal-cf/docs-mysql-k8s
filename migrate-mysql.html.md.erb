---
title: Migrating from MySQL for VMs to MySQL for Kubernetes
owner: MySQL
---

## <a id='overview'></a>  Overview

This topic describes how to migrate data from [VMware Tanzu SQL with MySQL for VMs](https://docs.vmware.com/en/VMware-Tanzu-SQL-with-MySQL-for-VMs/index.html) on [Tanzu Application Service (TAS) for VMs](https://docs.pivotal.io/application-service/3-0/concepts/overview.html) to VMware MySQL for Kubernetes. 

The migration process involves backing up the MySQL for VMs instances using the utility `mysqldump`, and restoring them under MySQL for Kubernetes. 

<p class="note">
      <strong>Note:</strong> Currenlty MySQL for VMs supports MySQL 5.7, while MySQL for Kubernetes supports MySQL 8
    </p>  

## <a id='prerequisites'></a>  Prerequisites

Before following the migration steps, you must:

* Refer to the changes relating to MySQL 8. For details refer to [What Is New in MySQL 8.0](https://dev.mysql.com/doc/refman/8.0/en/mysql-nutshell.html).
* Have a local machine with the following utilities installed, and ensure you have familiarity with these utilities:
  * `mysqldump` 5.7, to connect to MySQL service instances externally, take a logical backup, and store the backup. Refer to [How to install & run mysqldump](https://mysqldump.guru/how-to-install-and-run-mysqldump.html#how-to-install-run-mysqldump) for an example installation procedure. Install the utility relevant to your local machine operating system. 
  * `mysql` 8, to connect to MySQL on Kubernetes externally, and load the backup.
  * The Cloud Foundry Command-Line Interface (cf CLI). See [Installing the cf CLI](https://docs.pivotal.io/application-service/2-10/cf-cli/install-go-cli.html). 
* Have access credentials to access the TAS service instances you will be migrating. 
* Review which schemas you wish to migrate. The default schema created for MySQL for VMs service instances is named `service_instance_db`. For details on schemas and databases to backup and restore, refer to [Create a Tanzu SQL for VMs Logical Backup](https://docs.vmware.com/en/VMware-Tanzu-SQL-with-MySQL-for-VMs/2.10/tanzu-mysql-vms/GUID-backup-mysqldump.html#create-a-tanzu-sql-for-vms-logical-backup-2).
* Review and complete the prerequisites for [Creating and Deleting MySQL Instances in Kubernetes](https://docs.vmware.com/en/VMware-Tanzu-SQL-with-MySQL-for-Kubernetes/1.6/tanzu-mysql-k8s/GUID-create-delete-mysql.html).



## <a id='backing-up'></a>  Backup MySQL for VM instances

Review the following important points before starting the backup process:
- The MySQL service instance must be configured for external access (either using service gateway or CF SSH).
- `mysqldump` 5.7 should be used against a MySQL service instance.
- Take care to backup routines, triggers, events, and other objects as needed.
- You may wish to shut down applications connecting to the MySQL service instance that may continue to change the data. 

For each MySQL for VMs service instance, use `mysqldump` to create a logical backup. For details on how to manually create a logical backup with `mysqldump`, refer to [create a logical backup](https://docs.vmware.com/en/VMware-Tanzu-SQL-with-MySQL-for-VMs/2.10/tanzu-mysql-vms/GUID-backup-mysqldump.html#back-up-and-restore-a-tanzu-sql-for-vms-logical-backup-1) 


## <a id='existing-users'></a>  List existing users

1. Log in to TAS, and list the service keys for the MySQL service instance:

    ```
    cf service-keys <SERVICE_INSTANCE_NAME>
    ```
    where:

    - `SERVICE_INSTANCE_NAME` is the name of the MySQL service instance

1. Fetch the database, username, and password for each service key:

    ```
    cf service-key <SERVICE_INSTANCE_NAME> <SERVICE_KEY_NAME> | tail -n +3 | jq '{database: .name, username: .username, password: .password}'
    ```
    where:

    - `SERVICE_INSTANCE_NAME` is the name of the MySQL service instance
    - `SERVICE_KEY_NAME` is the name of the MySQL service key

    
    An example output could be:
    ```
    cf service-key test-single-node key | tail -n +3 | jq '{database: .name, username: .username, password: .password}'
    {
      "database": "service_instance_db",
      "username": "c67a09469fd349b5ac600893dff4cee0",
      "password": "apv1wll5zzv470w1"
    }
    ```
    
1. Note which users have read-only access instead of the default write access.

## <a id='create-instance'></a>  Create MySQL on Kubernetes instances

Create the  MySQL instances. For details, refer to [Creating and Deleting MySQL Instances](create-delete-mysql.html).

## <a id='create-users'></a>  Create existing users


1. Access the `mysql` container on the Kubernetes cluster:

    ```
    kubectl exec -it <POD_NAME> -c mysql -- bash
    ```
    where:

    - `POD_NAME` is the name of the MySQL pod

2. Log in as root in order to create objects as needed:

    ```
    mysql -uroot -p$(cat $MYSQL_ROOT_PASSWORD_FILE)
    ```
    
3. Create all necessary databases, and a user for each:

    ```
    CREATE DATABASE <DATABASE_NAME>;
    CREATE USER '<USERNAME>'@'%' IDENTIFIED BY '<PASSWORD>';
    GRANT ALL PRIVILEGES ON <DATABASE_NAME>;.* TO '<USERNAME>'@'%';
    FLUSH PRIVILEGES;
    ```

    Where:

    - `DATABASE_NAME` is the name of the database
    - `USERNAME` is the mysql username
    - `PASSWORD` is the password for the user
    
    Example:
    ```
    CREATE DATABASE service_instance_db;
    CREATE USER 'c67a09469fd349b5ac600893dff4cee0'@'%' IDENTIFIED BY 'apv1wll5zzv470w1';
    GRANT ALL PRIVILEGES ON service_instance_db.* to 'c67a09469fd349b5ac600893dff4cee0'@'%';
    FLUSH PRIVILEGES;
    ```
    
    For more information on creating a user for the associated database refer to [MySQL for Kubernetes](https://docs.vmware.com/en/VMware-Tanzu-SQL-with-MySQL-for-Kubernetes/1.6/tanzu-mysql-k8s/GUID-connecting-apps.html#create-a-database-and-privileged-mysql-user-for-the-app). 
    
4. Ensure the MySQL server can be accessed and connect with the newly created user to load the backup file

    <p class="note">
      <strong>Note:</strong> Make sure to use a mysql 8.0 client from your workstation when connecting to the MySQL service.
    </p>
    
    There are several methods to connect to the MySQL server:
    - Change the MySQL Kubernetes service to use an external IP. See [Access the MySQL Server from an External IP Address](https://docs.vmware.com/en/    VMware-Tanzu-SQL-with-MySQL-for-Kubernetes/1.6/tanzu-mysql-k8s/GUID-accessing.html#access-the-mysql-server-from-an-external-ip-address). Once the restore is done, remember to remove external access.
    - [Use Port Forwarding](https://kubernetes.io/docs/tasks/access-application-cluster/port-forward-access-application-cluster/) to access the MySQL pod from a local port.
    - Use `kubectl copy` to copy the backup onto a pod that has the `mysql` 8 client. This method also requires `kubectl exec` permissions to get a shell for a running container on that pod.
    - If the backup is too large to send over a local port through the Kubernetes API server or copy onto a pod, the backup could be stored on cloud storage and streamed  to `mysql` client.

## <a id='restore'></a>  Load the backup

Connect to the MySQL instance and load the backup file for each database, using the appropriate credentials:

```
mysql -h <HOSTNAME> -u <USERNAME> -P 3306 -p<PASSWORD> < <BACKUP_FILE>
```

WHERE
- `HOSTNAME` is the address of the MySQL service
- `USERNAME` is the mysql username
- `PASSWORD` is the password for the user
- `BACKUP_FILE` is the backup taken for the specific database

Example:

```
mysql -h a4dc8de1biefe13112-17761231.us-west-2.elb.amazonaws.com -u 'c67a09469fd349b5ac600893dff4cee0' -P 3306 -papv1wll5zzv470w1 < dump.sql 
```

When the restore completes, confirm that the schemas and data are loaded correctly, and remove external access to the MySQL instances.
