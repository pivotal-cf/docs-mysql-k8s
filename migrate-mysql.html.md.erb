---
title: Migrating from TAS to Kubernetes
owner: MySQL
---

This topic describes how to migrate data from VMware Tanzu SQL with MySQL for VMs to VMware MySQL for Kubernetes.

Tanzu SQL for VMs only supports MySQL 5.7 while MySQL for Kubernetes only supports MySQL 8.

Before upgrading using a logical dump, please 

## <a id='prerequisites'></a>  Prerequisites

Before you can back up MySQL service instances and restore to MySQL for Kubernetes, you must have:

* Refer to the [documentation](https://dev.mysql.com/doc/refman/8.0/en/mysql-nutshell.html) for all the changes in MySQL 8.
* Take note of which schemas you wish to migrate. The default schema for every instance is `service_instance_db`.
* Have a local machine with the following installed:
  * `mysqldump` 5.7 to connect to MySQL service instances externally, take a logical backup, and store the backup
  * `mysql` 8 to connect to MySQL on Kubernetes externally and load the backup
  * The Cloud Foundry Command-Line Interface (cf CLI). See [Installing the cf CLI](https://docs.pivotal.io/application-service/2-10/cf-cli/install-go-cli.html). 

## <a id='backing-up'></a>  Backing up with mysqldump

For each MySQL for VMs service instance, follow the steps from [this documentation](https://docs.vmware.com/en/VMware-Tanzu-SQL-with-MySQL-for-VMs/2.10/tanzu-mysql-vms/GUID-backup-mysqldump.html#back-up-and-restore-a-tanzu-sql-for-vms-logical-backup-1) how to manually create a logical backup with `mysqldump`. 

Reminders:
- The MySQL service instance must be configured for external access (either using service gateway or CF SSH).
- `mysqldump` 5.7 should be used against a MySQL service instance.
- Take care to back up routines, triggers, events, and other objects as needed.
- You may wish to shut down applications connecting to the MySQL service instance that may continue to change the data. 

## <a id='existing-users'></a>  Listing existing users

1. List service keys for the MySQL service instance
```bash
cf service-keys <SERVICE_INSTANCE_NAME>
```
Where
- `SERVICE_INSTANCE_NAME` is the name of the MySQL service instance

2. Fetch database, username, and password for each service key
```bash
cf service-key <SERVICE_INSTANCE_NAME> <SERVICE_KEY_NAME> | tail -n +3 | jq '{database: .name, username: .username, password: .password}'
```
Where
- `SERVICE_INSTANCE_NAME` is the name of the MySQL service instance
- `SERVICE_KEY_NAME` is the name of the MySQL service key

Example output:
```bash
cf service-key test-single-node key | tail -n +3 | jq '{database: .name, username: .username, password: .password}'
{
  "database": "service_instance_db",
  "username": "c67a09469fd349b5ac600893dff4cee0",
  "password": "apv1wll5zzv470w1"
}
```

Take note of which users have read-only access instead of the default write access.

## <a id='create-instance'></a>  Create MySQL on Kubernetes

Follow [Creating and Deleting MySQL Instances](create-delete-mysql.html) to create a MySQL instance.

## <a id='create-users'></a>  Create existing users
1. Access the `mysql` container
```bash
kubectl exec -it <POD_NAME> -c mysql -- bash
```
Where:
- `POD_NAME` is the name of the MySQL pod

2. Log in as root in order to create objects as needed
```
mysql -uroot -p$(cat $MYSQL_ROOT_PASSWORD_FILE)
```

3. Create all necessary databases and a user for each
```
CREATE DATABASE <DATABASE_NAME>;
CREATE USER '<USERNAME>'@'%' IDENTIFIED BY '<PASSWORD>';
GRANT ALL PRIVILEGES ON <DATABASE_NAME>;.* TO '<USERNAME>'@'%';
FLUSH PRIVILEGES;
```

Where:
- `DATABASE_NAME` is the name of the database
- `USERNAME` is the mysql username
- `PASSWORD` is the password for the user


Example:
```bash
CREATE DATABASE service_instance_db;
CREATE USER 'c67a09469fd349b5ac600893dff4cee0'@'%' IDENTIFIED BY 'apv1wll5zzv470w1';
GRANT ALL PRIVILEGES ON service_instance_db.* to 'mysqlappuser'@'%';
FLUSH PRIVILEGES;
```

See [MySQL for Kubernetes documentation](https://docs.vmware.com/en/VMware-Tanzu-SQL-with-MySQL-for-Kubernetes/1.6/tanzu-mysql-k8s/GUID-connecting-apps.html#create-a-database-and-privileged-mysql-user-for-the-app) for more information on creating a user for the associated database.

4. Ensure the MySQL pod can be access external and connect with the newly created user to load the backup file

> Note: Make sure to use a mysql 8.0 client from your workstation when connecting to the MySQL service

See [Access the MySQL Server from an External IP Address](https://docs.vmware.com/en/VMware-Tanzu-SQL-with-MySQL-for-Kubernetes/1.6/tanzu-mysql-k8s/GUID-accessing.html#access-the-mysql-server-from-an-external-ip-address) to configure the MySQL instance for external access.

## <a id='restore'></a>  Load backup

Connect to the MySQL instance externally and load the backup file for each database with the appropriate credentials 
```
mysql -h <HOSTNAME> -u <USERNAME> -P 3306 -p<PASSWORD> < <BACKUP_FILE>
```

WHERE
- `HOSTNAME` is the address of the MySQL service
- `USERNAME` is the mysql username
- `PASSWORD` is the password for the user
- `BACKUP_FILE` is the backup taken for the specific database

Example:
```bash
mysql -h a4dc8de1biefe13112-17761231.us-west-2.elb.amazonaws.com -u 'c67a09469fd349b5ac600893dff4cee0' -P 3306 -papv1wll5zzv470w1 < dump.sql 
```

Once finished with the restore, and confirm the schemas and data are loaded correctly, you may remove external access to the MySQL instance.
