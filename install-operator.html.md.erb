---
title: Installing the Tanzu SQL for Kubernetes Operator
owner: MySQL
---

<strong><%= modified_date %></strong>

This topic describes how to install <%= vars.product_full %> using two different methods. 

- Use [Installing Tanzu MySQL Operator via Tanzu Network Registry](#install-via-tanzu) for a faster installation process, and if your server hosts have access to the internet. 

- Use [Installing Tanzu MySQL Operator via Downloadable Archive File](install-operator.html#install-via-tar) if your server hosts do not have access to the internet, or if you want to install from a private registry.

## <a id="install-via-tanzu"></a>Install Tanzu MySQL Operator via the Tanzu Network Registry

This section describes how to access the resources, and deploy the <%=vars.product_full %> Operator using the Tanzu Network Registry. 

### <a id='tanzu-prereq'></a>Prerequisites

Before you deploy the Tanzu MySQL operator, you need:

- Access to [Tanzu Network](https://network.pivotal.io) and [Tanzu Network Registry](https://registry.pivotal.io/). You can use the same credentials for both sites.

- [Docker](https://github.com/docker) running and configured on your local computer, to access the Kubernetes cluster and Docker registry.

- A running Kubernetes cluster - [Google Kubernetes Engine (GKE)](prepare-gke.html), [VMware Enterprise TKGi)](prepare-pks.html) or [Minikube](minikube.html) - and the [kubectl](https://kubernetes.io/docs/tasks/tools/install-kubectl/) command-line tool, configured and authenticated to communicate with your Kubernetes cluster. If you are using GKE, install the [gcloud](https://cloud.google.com/sdk/gcloud/) command-line tool on your local client.

- The Helm v3 command-line tool installed. For more information, see [Installing Helm](https://helm.sh/docs/intro/install/) from the Helm documentation.

- `cluster-admin` ClusterRole access to the Kubernetes cluster. For more information, see the [Kubernetes documentation](https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles).

* [Cert Manager](https://github.com/jetstack/cert-manager) installed on the Kubernetes cluster. 
    
    Install cert-manager by running these commands from your local client:

    ``` bash
    $ kubectl create namespace cert-manager
    $ helm repo add jetstack https://charts.jetstack.io
    $ helm repo update
    $ helm install cert-manager jetstack/cert-manager --namespace cert-manager  --version <1.latest> --set installCRDs=true
    ```
    where:
    - `--namespace cert-manager` is the namespace used for cert manager in the Kubernetes cluster
    - `--version <1.latest>` is the latest cert-manager version available (minimum above 1.0.2)
    - `--set installCRDs=true` ensures cert manager installs all types necessary to create certificates

    To verify the installation run:

    ```
    $ kubectl get all --namespace=cert-manager
    ```
    
    The output should be similar to:

    ```
    NAME                                           READY   STATUS    RESTARTS   AGE
    pod/cert-manager-57b65b7fc-x8vjt               1/1     Running   5          4d19h
    pod/cert-manager-cainjector-5f988f74c6-tgk25   1/1     Running   15         4d19h
    pod/cert-manager-webhook-7cf554f879-b5ss9      1/1     Running   4          4d19h

    NAME                           TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE
    service/cert-manager           ClusterIP   10.106.253.7    <none>        9402/TCP   4d19h
    service/cert-manager-webhook   ClusterIP   10.108.17.113   <none>        443/TCP    4d19h

    NAME                                      READY   UP-TO-DATE   AVAILABLE   AGE
    deployment.apps/cert-manager              1/1     1            1           4d19h
    deployment.apps/cert-manager-cainjector   1/1     1            1           4d19h
    deployment.apps/cert-manager-webhook      1/1     1            1           4d19h

    NAME                                                 DESIRED   CURRENT   READY   AGE
    replicaset.apps/cert-manager-57b65b7fc               1         1         1       4d19h
    replicaset.apps/cert-manager-cainjector-5f988f74c6   1         1         1       4d19h
    replicaset.apps/cert-manager-webhook-7cf554f879      1         1         1       4d19h
    ```
    
    For more advanced security scenarios, see [Configuring TLS for MySQL Instances](configure-tls.html). 

### <a id="access"></a> Access the Resources

To install the Tanzu MySQL operator, you must download the Helm chart and images.

To download the resources:

1. Set the environment variable to enable OCI support in the Helm v3 client by running:

    ```
    export HELM_EXPERIMENTAL_OCI=1
    ```

    If you skip this step, the following error message might appear:
    <pre class="terminal">Error: this feature has been marked as experimental and is not enabled by default.</pre>

1. Use Helm to log in to the Tanzu Network Registry by running:

    ```
    helm registry login registry.pivotal.io
    ```

    Follow the prompts to enter the email address and password for your <%= vars.product_network %> account.

1. Log in to [<%= vars.product_network %>](https://network.pivotal.io) and go to
the **<%= vars.product_full %>** product page.

1. Click **Artifact References** to navigate into the artifacts directory. Keep the page
open to reference in the following step.

1. Download each of the artifact references using the command line.
  1. **To download `tanzu-mysql-operator-chart` to the Helm cache:** Click the artifact from <%= vars.product_network %> and paste the
  two commands into the command line.
  <br><%= image_tag("tanzu-mysql-operator-artifact.png", :width => "450px",
  :alt=>"Modal shows 4 pieces of data: type, digest, 'set the environment variable' and 'pull this chart'") %>
  <br><a href="./images/tanzu-mysql-operator-artifact.png" target="_blank" aria-hidden="true">Click here to view a larger version of this diagram</a>
  <br><br>For example:
  <pre class="terminal">$ export HELM\_EXPERIMENTAL\_OCI=1
$ helm chart pull registry.pivotal.io/tanzu-mysql-for-kubernetes/tanzu-mysql-operator-chart:1.1.0
<br>1.1.0: Pulling from registry.pivotal.io/tanzu-mysql-for-kubernetes/tanzu-mysql-operator-chart
ref:     <span style="color: #77bf00;">registry.pivotal.io/tanzu-mysql-for-kubernetes/tanzu-mysql-operator-chart:1.1.0</span>
digest:  2b6e1d010ab1737dcc5a426b223a06db1c616107d2ceaf368db6fda48d96a61a
size:    4.2 KiB
name:    tanzu-sql-with-mysql-operator
version: 1.1.0
Status: Downloaded newer chart for registry.pivotal.io/tanzu-mysql-for-kubernetes/tanzu-mysql-operator-chart:1.1.0</pre>
  1. **To download `tanzu-mysql-instance`:** Click the artifact from <%= vars.product_network %> and paste the
  command into the command line.
  <br><br>For example:
  <pre class="terminal">$ docker pull registry.pivotal.io/tanzu-mysql-for-kubernetes/tanzu-mysql-instance:1.1.0
    <br>1.1.0: Pulling from tanzu-mysql-for-kubernetes/tanzu-mysql-instance
f22ccc0b8772: Pull complete
3cf8fb62ba5f: Pull complete
e80c964ece6a: Pull complete
0c31331fda89: Pull complete
0e9674cd2c60: Pull complete
d88e035d5311: Pull complete
5055f7e93495: Pull complete
80e0c3183303: Pull complete
6312f33f1306: Pull complete
47733910cd21: Pull complete
4ac582ac7e82: Pull complete
e9ad4cffabdc: Pull complete
4b9107ee1e3e: Pull complete
faffd54990ce: Pull complete
Digest: sha256:78073dcf626603da192b78643bda24e0098f944d0bd54da1d60924b20d5eea8c
Status: Downloaded newer image for registry.pivotal.io/tanzu-mysql-for-kubernetes/tanzu-mysql-instance:1.1.0
registry.pivotal.io/tanzu-mysql-for-kubernetes/tanzu-mysql-instance:1.1.0</pre>
  1. **To download the `tanzu-mysql-operator` image:** Click the artifact from <%= vars.product_network %> and paste the
  command into the command line.
  <br><br>For example:
  <pre class="terminal">$ docker pull registry.pivotal.io/tanzu-mysql-for-kubernetes/tanzu-mysql-operator:1.1.0
    <br>1.1.0: Pulling from tanzu-mysql-for-kubernetes/tanzu-mysql-operator
be69922ffb42: Pull complete
ef291e196a72: Pull complete
Digest: sha256:91664f6866b7228b68d3fb9ff8e13af95f618b7b78e5fd35690dd29394a08db1
Status: Downloaded newer image for registry.pivotal.io/tanzu-mysql-for-kubernetes/tanzu-mysql-operator:1.1.0
registry.pivotal.io/tanzu-mysql-for-kubernetes/tanzu-mysql-operator:1.1.0</pre>

### <a id="install"></a> Install the Operator

To install the Tanzu MySQL operator, you must use kubectl to create a namespace and secret.
Then, use the Helm CLI to install the operator.

#### <a id="create-namespace-secret"></a> Create Namespace and Secret
To create the namespace and secret:

1. Create the namespace by running:

    ```
    kubectl create namespace tanzu-mysql-for-kubernetes-system
    ```

1. Set your kubectl context to the newly-created namespace by running:

    ```
    kubectl config set-context --current --namespace tanzu-mysql-for-kubernetes-system
    ```
3. If you want to deploy the Tanzu MySQL images from a registry
other than registry.pivotal.io, log in to the docker registry:

    ```
    docker login -u DOCKER-USERNAME -p DOCKER-PASSWORD registry.pivotal.io
    ```
4. Create a Kubernetes secret for accessing registry containing the Tanzu MySQL images by running:

    ```
    kubectl create secret docker-registry tanzu-image-registry --docker-server=https://registry.pivotal.io/ \
    --docker-username=DOCKER-USERNAME --docker-password=DOCKER-PASSWORD
    ```

1. Download the Helm chart to your current working directory on your local machine by running:

    ```
    helm chart export REGISTRY-URL
    ```
    Where `REGISTRY-URL` is the reference to the Tanzu MySQL Helm chart.

    <br>The value of `REGISTRY-URL` has the following pattern:

    ```
    registry.pivotal.io/tanzu-mysql-for-kubernetes/tanzu-mysql-operator-chart:VERSION-NUMBER-TAG
    ```
    Where `VERSION-NUMBER-TAG` is the version of the Helm chart.

    <br>This downloads a directory named `tanzu-sql-with-mysql-operator/` into your current working directory that contains:
    * The Tanzu MySQL Helm chart
    * Custom Resource Definitions (CRDs)
    * Role-Based Access Control (RBAC) definitions required to install the operator with Helm

    <br>For example:
    <pre class="terminal">$ helm chart export registry.pivotal.io/tanzu-mysql-for-kubernetes/tanzu-mysql-operator-chart:1.1.0
    <br>ref:     registry.pivotal.io/tanzu-mysql-for-kubernetes/tanzu-mysql-operator-chart:1.1.0
    digest:  2b6e1d010ab1737dcc5a426b223a06db1c616107d2ceaf368db6fda48d96a61a
    size:    4.2 KiB
    name:    tanzu-sql-with-mysql-operator
    version: 1.1.0
    Exported chart to tanzu-sql-with-mysql-operator/
    </pre>

#### <a id="create-overrides"></a> Review values.yaml and Create Overrides If Needed

In most situtations, the default values supplied in the `values.yaml` file do not need to be changed.

However, if any of the following are true, you need to follow the steps below to override the defaults:

+ You deployed the Tanzu SQL for Kubernetes images from a registry other than registry.pivotal.io.
+ You did not use the default `tanzu-image-registry` for the secret name in Step 4 above.
+ You want to allocate different CPU or memory resources for your operator.
+ You want to specify an alternate default version for new MySQL instances.

<p class="note">
<strong>Note:</strong>
Do not edit <code>values.yaml</code> directly. Create a <code>values-override.yaml</code>.
</p>

Confirm and configure the Tanzu SQL operator for your environment:

1. Review the `values.yaml` file.

    For example:
    <pre><code>---
    imagePullSecret: tanzu-image-registry
    <br>operatorImage: registry.pivotal.io/tanzu-mysql-for-kubernetes/tanzu-mysql-operator:1.1.0
    <br>registry: "registry.pivotal.io/tanzu-mysql-for-kubernetes/"
		<br>defaultInstanceVersion: 1.1.0
    <br>resources:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi
    </code></pre>

2. Determine which values in the `values.yaml` file need to be changed for your environment.
       Use the table below as a guide.
    <table>
      <thead>
        <tr>
          <th width="30%">Key</th>
          <th width="15%">Value Type</th>
          <th width="55%">Description</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td><code>imagePullSecret</code></td>
          <td>String</td>
          <td>Name of image secret. This value must match the name of the Kubernetes
            secret you create in <a href="#create-namespace-secret">Create Namespace and Secret</a> above.</td>
        </tr>
        <tr>
          <td><code>operatorImage</code></td>
          <td>URI</td>
          <td>Reference to the Tanzu MySQL operator image.
            If you uploaded the operator image to a private registry, you must
            change this reference to pull the operator image from your registry.</td>
        </tr>
        <tr>
          <td><code>registry</code></td>
          <td>URI</td>
          <td>The registry from which to download Tanzu MySQL images.</td>
        </tr>
        <tr>
          <td><code>defaultInstanceVersion</code></td>
          <td>String</td>
          <td>The default version of Tanzu MySQL to use when creating new instances.</td>
        </tr>
        <tr>
          <td><code>resources</code></td>
          <td>List</td>
          <td>Limits and requests for CPU and memory for the Tanzu MySQL operator.
            You can change these values to scale your resources.</td>
        </tr>
      </tbody>
    </table>

3. Create a copy of `values.yaml` and name the new file`values-override.yaml`.

4. Edit the values that you want to change.
5. Delete the sections of the file that you do not change.
6. Save the `values-override.yaml` file in the same directory as the `values.yaml` file.

#### <a id="install-operator"></a> Use Helm CLI to Install the Operator

To install the operator using the Helm CLI:

1. Verify that you are in the same working directory as where you downloaded the Helm chart in Step 4 of
[Create Namespace and Secret](#create-namespace-secret) above.

1. Install the Tanzu MySQL operator by running one of the following:
    + If you created a custom `values-override.yaml` in [Review values.yaml and
    Create Overrides If Needed](#create-overrides) above,
    then run the following helm command:

        ```
        helm install --values=/your/values-override.yaml tanzu-sql-with-mysql-operator ./tanzu-sql-with-mysql-operator/
        ```
    + If you did not create a `values-override.yaml`, then run the following helm command:

        ```
        helm install tanzu-sql-with-mysql-operator ./tanzu-sql-with-mysql-operator/
        ```

1. See that your operator has installed successfully by running:

    ```
    kubectl get all
    ```
    The Tanzu MySQL operator has finished installing when you see the value of the `STATUS` column for the
    Tanzu MySQL operator Pod is `Running`. See example output:
    <pre class="terminal">$ kubectl get all
NAME                                                           READY   STATUS    RESTARTS   AGE
pod/mysql-for-kubernetes-controller-manager-84d76dfb77-lq5mb   1/1     <span style="color: #77bf00;">Running</span>   0          21s
<br>NAME                                                      READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/mysql-for-kubernetes-controller-manager   1/1     1            1           23s
<br>NAME                                                                 DESIRED   CURRENT   READY   AGE
replicaset.apps/mysql-for-kubernetes-controller-manager-84d76dfb77   1         1         1       23s</pre>

    <p class="note">
      <strong>Note:</strong> You can only have one Tanzu MySQL operator installed in a Kubernetes cluster.
    </p>

## <a id="install-via-tar"></a>Install Tanzu Operator via a Downloaded Archive File
        
Choose this method if:

- The installation destination (for example an air-gapped network) cannot access the [VMware Tanzu Network](https://network.pivotal.io).
- Or you wish to load the Operator and instance images to private Docker registry.

This section covers:

- Downloading and unpacking the <%=vars.product_full %> distribution from [VMware Tanzu Network](https://network.pivotal.io)
- Loading the images to a local Docker registry
- Pushing the images from the local Docker registry to a private container registry
- Configuring a Kubernetes secret for accessing the private container registry
- Deploying the MySQL operator

### <a id="download-prerequisites"></a>Prerequisites

Before you deploy the <%=vars.product_full %> Operator, review the list of [Prerequisites](#prereq) that apply to both installation methods. 

### Download and unpack the <%=vars.product_full %> distribution 

1. Download the <%=vars.product_full %> distribution from [VMware Tanzu Network](https://network.pivotal.io). The <%=vars.product_full %> download filename has the format: `tanzu-mysql-for-kubernetes-<version>.tgz`

2. Unpack the downloaded software:

    ``` bash
    $ cd ~/Downloads
    $ tar xzf tanzu-mysql-for-kubernetes-<version>.tgz
    ```

    This command unpacks the distribution into a new directory named `tanzu-mysql-for-kubernetes-<version>`, for example `tanzu-mysql-for-kubernetes-1.1.0`.

3.  Change to the new `tanzu-mysql-for-kubernetes-<version>` directory.

    ``` bash
    $ cd ./tanzu-mysql-for-kubernetes-*
    ```

### <a id="docker"></a>Load the Images to a Local Docker Registry

1. Load the MySQL instance image to the Docker registry.

    ``` bash
    $ docker load -i ./images/tanzu-mysql-instance
    ```

2.  Load the MySQL operator image to the Docker registry.

    ``` bash
    $ docker load -i ./images/tanzu-mysql-operator
    ```

3.  Verify that the two Docker images are now available.

    ``` bash
    $ docker images "tanzu-mysql-*"
    ```

### <a id="push-to-registry"></a>Push the Images from the local Docker Registry to a Private Container Registry

Push the <%= vars.product_full %> Docker images to the container registry of your choice. Set each image's project and image repo name, tag the images, and then push them using the Docker command `docker push`.

This example tags and pushes the images to the Google Cloud Registry, using the default (core) project name for the example Google Cloud account.

``` bash
$ gcloud auth configure-docker

$ PROJECT=$(gcloud config list core/project --format='value(core.project)')
$ REGISTRY="gcr.io/${PROJECT}"

$ INSTANCE_IMAGE_NAME="${REGISTRY}/tanzu-mysql-instance:$(cat ./images/tanzu-mysql-instance-tag)"
$ docker tag $(cat ./images/tanzu-mysql-instance-id) ${INSTANCE_IMAGE_NAME}
$ docker push ${INSTANCE_IMAGE_NAME}

$ OPERATOR_IMAGE_NAME="${REGISTRY}/tanzu-mysql-operator:$(cat ./images/tanzu-mysql-operator-tag)"
$ docker tag $(cat ./images/tanzu-mysql-operator-id) ${OPERATOR_IMAGE_NAME}
$ docker push ${OPERATOR_IMAGE_NAME}
```

### <a id="create-service-accounts"></a>Configure a Kubernetes Secret for Accessing the Private Container Registry

Create a `docker-registry` type secret to allow the Kubernetes cluster to authenticate with the private container registry so it can pull images. These examples create a secret named `regsecret` using Harbor, Google Cloud Registry (GCR), and Amazon Elastic Container Registry (ECR). 

**IMPORTANT**: The commands below create the secret in the `default` namespace. Only pods created in the same `default` namespace can reference the secret. To create a secret in a different namespace, use the `--namespace` flag.

**Harbor**

``` bash
$ kubectl create secret docker-registry regsecret \
    --docker-server=${HARBOR_URL} \
    --docker-username=${HARBOR_USER} \
    --docker-password="${HARBOR_PASSWORD}"
```

**GCR**

``` bash
$ kubectl create secret  docker-registry  regsecret \
        --docker-server=https://gcr.io \
        --docker-username=_json_key \
        --docker-password="$(cat ~/key.json)"
```
For information about how to obtain the `key.json` service account file, see [Kubernetes Service Account](prepare-gke.html#key-file)

**ECR**

``` bash
$ TOKEN=`aws ecr --region=$REGION get-authorization-token --output text --query authorizationData[].authorizationToken | base64 -d | cut -d: -f2`
$ kubectl create secret docker-registry regsecret \
    --docker-server=https://${ACCOUNT}.dkr.ecr.${REGION}.amazonaws.com \
    --docker-username=AWS \
    --docker-password="${TOKEN}"
```


Next follow [Deploying a MySQL Operator](install-operator.html#create-operator). The MySQL operator will use this secret to allow the Kubernetes cluster to authenticate with the container registry to pull images.

### <a id="create-operator"></a> Deploy the MySQL Operator 

The MySQL operator is the controller for MySQL instances resources. You install the MySQL operator using the Helm package manager.

#### <a id="config-file"></a>Edit the Operator Configuration

1.  Go to the directory where you unpacked the <%=vars.product_full %> distribution.

    ``` bash
    $ cd tanzu-mysql-for-kubernetes-*
    ```
    The file `charts/tanzu-sql-with-mysql-operator/values.yaml` in the <%= vars.product_full %> directory specifies the location of the MySQL operator and instance images. By default it contains the following values:
    
    ```
---
imagePullSecretName: tanzu-image-registry
operatorImage: registry.pivotal.io/tanzu-mysql-for-kubernetes/tanzu-mysql-operator:1.1.0-rc.8
registry: "registry.pivotal.io/tanzu-mysql-for-kubernetes/"
defaultInstanceVersion: 1.1.0-rc.8
resources: {}
    ```

1.  Create a copy of `values.yaml` and name the new file `operator-values-overrides.yaml`. Save this file in the same directory as the `values.yaml` file. In this file, you can specify the custom container registry and secret. For manual changes, you may also set individual parameters using the `--set` flag on the command line. 

    See [Helm Values Files](https://helm.sh/docs/chart_template_guide/values_files/) in the Helm documentation for more information.<br><br>

    If you are using a single node Minikube environment, it is not necessary to override the `operator/values.yaml` file because Minikube pulls the images from its local Docker registry.
    <br><br>
    Determine which values in the `values.yaml` file need to be changed for your environment. Use the table below as a guide.
    <table>
      <thead>
        <tr>
          <th width="30%">Key</th>
          <th width="15%">Value Type</th>
          <th width="55%">Description</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td><code>imagePullSecret</code></td>
          <td>String</td>
          <td>Name of image secret. This value must match the name of the Kubernetes
            secret you create in <a href="#create-namespace-secret">Create Namespace and Secret</a> above.</td>
        </tr>
        <tr>
          <td><code>operatorImage</code></td>
          <td>URI</td>
          <td>Reference to the Tanzu MySQL operator image.
            If you uploaded the operator image to a private registry, you must
            change this reference to pull the operator image from your registry.</td>
        </tr>
        <tr>
          <td><code>registry</code></td>
          <td>URI</td>
          <td>The registry from which to download Tanzu MySQL images.</td>
        </tr>
        <tr>
          <td><code>defaultInstanceVersion</code></td>
          <td>String</td>
          <td>The default version of Tanzu MySQL to use when creating new instances.</td>
        </tr>
        <tr>
          <td><code>resources</code></td>
          <td>List</td>
          <td>Limits and requests for CPU and memory for the Tanzu MySQL operator.
            You can change these values to scale your resources.</td>
        </tr>
      </tbody>
    </table>

1. Edit the values that you want to change.
1. Delete the sections of the file that you do not change.
1.  Save the `operator-values-overrides.yaml` file in a location of your choice or the same directory as the `values.yaml` file.

#### <a id="create-release"></a>Create the MySQL Operator 
    
1.  Use Helm to install the MySQL operator in your Kubernetes cluster.

    ``` bash
    $ helm install --wait my-mysql-operator operator/
    ```

    where:
    * `--wait` flag waits for the Operator deployment to complete before any image installation starts
    * `my-mysql-operator` is the custom name you provide for your MySQL operator
    * `operator/` is the location of the MySQL Operator helm chart 

    or

    ``` bash
    $ helm install --wait my-mysql-operator -f charts/tanzu-sql-with-mysql-operator/operator-values-overrides.yaml charts/tanzu-sql-with-mysql-operator/
    ```
    
    Replace `charts/tanzu-sql-with-mysql-operator/operator-values-overrides.yaml` with your custom location.
    <br><br>

    To create the Operator in a namespace different that the default, use:
    
    ``` bash
    $ helm install --wait my-mysql-operator charts/tanzu-sql-with-mysql-operator/ \
      --namespace=${OPERATOR_NAMESPACE} \
      --create-namespace \   
    ```

    Helm installs the new release into the Kubernetes namespace specified in the current Kubernetes context. The command displays a message similar to:

    ```
    NAME: my-mysql-operator
    LAST DEPLOYED: Wed Jun 16 13:28:05 2021
    NAMESPACE: default
    STATUS: deployed
    REVISION: 1
    TEST SUITE: None
    ```
    
    **Note**: The secret namespace in step [Create a Kubernetes Access Secret](#create-service-accounts) must match the Operator namespace.  

3.  Use `watch kubectl get all` to monitor the progress of the deployment. The deployment is complete when the MySQL Operator pod status changes to `Running`.

    ``` bash
    $ watch kubectl get all
    ```
    
    You may also check the logs to confirm the Operator is running properly:

    ``` bash
    $ kubectl logs -l app=mysql-operator
    ```
    
    Use the label `app=mysql-operator` to search across resources created by the MySQL Operator Helm chart:

    ``` bash
    $ kubectl get all -l app=mysql-operator -n mysql-operator
    ```
    where `-n mysql-operator` defines the namespace. The output would be similar to:

    ``` bash
    NAME                                           READY       STATUS           RESTARTS      AGE
    pod/mysql-operator-69765b8b74-rtms7            1/1         Running          0             3d19h
    NAME                                           READY       UP-TO-DATE       AVAILABLE     AGE
    deployment.apps/mysql-operator                 1/1         1                1             3d19h
    NAME                                           DESIRED     CURRENT          READY         AGE
    replicaset.apps/mysql-operator-69765b8b74      1           1                1             3d19h
    ```
