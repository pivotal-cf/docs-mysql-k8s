---
title: Configuring MySQL Instances for High Availability
---

This topic describes how to use <%= vars.product_full %> to create high-availability (HA) MySQL instances.


## <a id='overview'></a>  Overview

High-availability (HA) MySQL instances offer automatic failover, ensuring that app requests operate continuously
and without extended downtime.

For more information about high availability including an architecture diagram,
see [Architecture of an HA MySQL Instance](architecture.html#ha-diagram)
in _Architecture_.

### <a id='planning'></a> About Planning for Long-Lived HA MySQL Instances

HA MySQL instances are often used in production environments.
Before creating an HA instance that you intend to rely on for a long time,
carefully consider the resource requests and limits.

If you do not designate resource requests and limits, then Kubernetes
schedules Pods onto node resources according to best effort policies.
If resources become constrained, your Pods running MySQL risk eviction
as Kubernetes manages resources allocation among its Pods.
For information about the properties used to set limits and requests,
see [Property Reference for the MySQL Resource](property-reference-mysql.html).

### <a id='node-selection'></a> About Explicit Node Selection and Anti-Affinity

<%= vars.product_full %> does not support explicit node selection for controlling Pod 
assignment to Kubernetes nodes. The Pod's nodeSelector field is not assigned.
Pod assignment to Kubernetes nodes can be controlled using Node Affinity 

### <a id='affinity-tolerations'></a> About Affinity and Tolerations
<%= vars.product_full %> does support Affinity and Tolerations to control where the Pods are assigned.
The Operator assigns the Affinity and Toleration fields within MySQL objects to the corresponding fields
in the Pods' spec.
To understand how to constrain Pods to run on a particular node refer [here](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/)

### <a id='scale-up'></a> About Scaling Single Node to HA

You can convert a single-node MySQL instance to an HA MySQL instance with a single command.
See [Convert a Single-Node MySQL Instance to an HA MySQL Instance](#convert-to-ha) below.

### <a id='scale-down'></a> About Scaling HA to Single Node

It is not straightforward to convert an HA instance to a single-node instance.
To move from an HA instance to a single-node instance,
you must take a backup of the HA instance and restore it to a new single-node instance.
See [Move an HA MySQL Instance to a Single-Node MySQL Instance](#ha-to-sn) below.

### <a id='about-backups'></a>  About Backing Up HA Instances

HA MySQL instances are backed up and restored the same way as single-node MySQL instances.
Backups from HA instances are created from the primary MySQL Pod.
You can restore the backups from HA instances to either single-node or HA instances.
For information about backup and restore,
see [Backing Up and Restoring MySQL Instances](backup-restore.html).

### <a id='about-schema'></a> About HA Schema Compatibility

Tables in an HA database must be compatible with MySQL Group Replication.
Group Replication [requires](https://dev.mysql.com/doc/refman/8.0/en/group-replication-requirements.html)
that each table have a `PRIMARY KEY` or Equivalent (non-null unique key).

## <a id='prerequisites'></a>  Prerequisites

Before you can configure high availability, you must have:

<%= partial '/prerequisites' %>

* Reviewed how to create and delete single-node MySQL instances.
  See [Creating and Deleting MySQL Instances](create-delete-mysql.html).

## <a id="create-ha"></a> Create an HA MySQL Instance

Creating an HA MySQL instance is very similar to creating a single-node MySQL instance.
By default, MySQL instances are single node.

To create an HA instance:

1. Follow the steps 1–4 in [Create a MySQL Instance](create-delete-mysql.html#create-instance).

2. Edit your uniquely named copy of `mysql.yaml`:

    1. Set the value of `highAvailability.enabled` to `true`:

        ```
        ---
        apiVersion: with.sql.tanzu.vmware.com/v1
        kind: MySQL
        metadata:
          name: mysql-ha-sample
        spec:
          imagePullSecretName: tanzu-image-registry
          highAvailability:
            enabled: true
        ```

    2. Edit the other properties for the instance as needed.
         For information about the properties that you can set for the MySQL resource,
         see [Property Reference for the MySQL Resource](property-reference-mysql.html).

1. Create and verify the instance by following steps 6 and 7
   in [Create a MySQL Instance](create-delete-mysql.html#create-instance).


## <a id="convert-to-ha"></a>  Convert a Single-Node MySQL Instance to an HA MySQL Instance

If a single-node MySQL instance already exists, you can edit its YAML file to set high-availability
and then redeploy the instance.

<p class="note">
   <strong>Note:</strong>
Ensure that you want an HA instance before following this procedure.
You cannot easily change an HA instance back to a single-node one.
</p>

Before converting to HA, ensure that your database schema satisfies the [Schema Compatability for HA](#about-schema) requirements.

To change a single-node instance into an HA instance:

1. Open the YAML file that you created in step 4 of [Create a MySQL Instance](create-delete-mysql.html#create-instance)
   in _Creating and Deleting MySQL Instances_.

2. Change the value of `spec.highAvailability.enabled` to `true` to obtain a three-member HA instance and save the file. To change the number of members in the HA instance, see [Change Number of Members in HA MySQL Instance](high-availability.html#configuring-ha).

3. Apply the change and deploy the HA instance by running:

    ```
    kubectl -n DEVELOPMENT-NAMESPACE apply -f FILENAME
    ```

    Where:
    * `DEVELOPMENT-NAMESPACE` is the namespace for the instance.
    * `FILENAME` is the name of the YAML file edited.

    For example:

    ``` 
    kubectl -n my-namespace apply -f testdb.yaml
    ```
    ```
    mysql.with.sql.tanzu.vmware.com/mysql-sample created
    ``` 

## <a id="configuring-ha"></a>  Change Number of Members in HA MySQL Instance
* A high-availability instance can have 3, 5, 7, or 9 members.
* The default number of members for an HA instance is 3.
* The number of members can be scaled up but not down. 
* MySQL supports a maximum of 9 members of a single replication group. An even number of members is not a best practice for maintaining quorum. See the MySQL documentation on [Network Partition and Loss of Quorum](https://dev.mysql.com/doc/refman/8.0/en/group-replication-network-partitioning.html)
* To change the number of members in your HA instance, change the value of `spec.highAvailability.members`. 
    ```
    spec:
      highAvailabillity:
        members: 5
    ```

## <a id="inspect-instance"></a>  Inspect an HA MySQL Instance

After you have created your HA MySQL instance, you can inspect the instance to
confirm that all the Pods are running.

This inspection procedure can also be used for troubleshooting.

1. Connect to one of the instance Pods, by running:

    ```
    kubectl exec -it POD-NAME --container=mysql -- bash
    ```
    Where `POD-NAME` is the name of the primary Pod or one of the secondary Pods.
    The Pod name is the instance name appended with an index of 0–2.
    When the instance is first created, the index for the primary Pod is 0.

    For example:

    ``` 
    kubectl exec -it mysql-ha-sample-0 --container=mysql -- bash
    ``` 

2. On the Pod, log in to the MySQL database by running:

    ```
    mysql --user=USER --password=PASSWORD
    ```
    Where:
    * `USER` is a username on the database. When the database is first created, only the root user exists.
    * `PASSWORD` is the password for the database user.

    For example:

    ``` 
    mysql@mysql-sample-0:/mysql --user=root --password=$(cat $MYSQL_ROOT_PASSWORD_FILE)
    ``` 

3. Query the database by running:

    ```
    mysql>SELECT * FROM performance_schema.replication_group_members\G;
    ```
    The following example is from
    a healthy cluster with a single member designated `PRIMARY` and two `SECONDARY` members:

    ``` 
      mysql>SELECT * FROM performance_schema.replication_group_members\G;
      *************************** 1. row ***************************
      CHANNEL_NAME: group_replication_applier
         MEMBER_ID: 157baa2a-8c22-11eb-847c-0242ac110009
         MEMBER_HOST: mysql-ha-sample-0.mysql-ha-sample-members.default.svc.cluster.local
         MEMBER_PORT: 3306
      MEMBER_STATE: ONLINE
         MEMBER_ROLE: PRIMARY
      MEMBER_VERSION: 8.0.22
      *************************** 2. row ***************************
      CHANNEL_NAME: group_replication_applier
         MEMBER_ID: 281ad3c9-8c22-11eb-b3aa-0242ac11000a
         MEMBER_HOST: mysql-ha-sample-1.mysql-ha-sample-members.default.svc.cluster.local
         MEMBER_PORT: 3306
      MEMBER_STATE: ONLINE
         MEMBER_ROLE: SECONDARY
      MEMBER_VERSION: 8.0.22
      *************************** 3. row ***************************
      CHANNEL_NAME: group_replication_applier
         MEMBER_ID: 3c52bb9a-8c22-11eb-aade-0242ac11000b
         MEMBER_HOST: mysql-ha-sample-2.mysql-ha-sample-members.default.svc.cluster.local
         MEMBER_PORT: 3306
      MEMBER_STATE: ONLINE
         MEMBER_ROLE: SECONDARY
      MEMBER_VERSION: 8.0.22
    ``` 

4. Review the value of `MEMBER_STATE`.
   A healthy cluster shows `ONLINE` for all members.
    For information about the Group Replication server states,
    see the [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/group-replication-server-states.html).

## <a id='ha-to-sn'></a>  Move an HA MySQL Instance to a Single-Node MySQL Instance

To move from an HA MySQL instance to a single-node MySQL instance, you need to back up the HA instance
and restore the backup to a single-node instance.

1. Back up the HA instance.
   See [Back Up VMware SQL with MySQL for Kubernetes Data](backup-restore.html#backup) in _Backing Up and Restoring MySQL Instances_.

2. Restore the backup to a single-instance node.
   See [Restore from a Backup](backup-restore.html#restore-from-backup)
   in _Backing Up and Restoring MySQL Instances_.
   When you edit your copy of the `restore.yaml` file, set `highAvailability.enabled` to `false`.

<p class="note">
   <strong>Note:</strong>
You cannot scale down an existing HA instance to a single-node instance
by applying <code>highAvailablity.enabled: false</code> to an HA instance.
The <code>apply</code> command fails.
</p>

## <a id='delete'></a>  Delete an HA MySQL Instance

Deleting an HA MySQL instance is the same as deleting a single-node instance. See [Delete a MySQL Instance](create-delete-mysql.html#delete-instance) in _Creating and Deleting MySQL Instances_.
