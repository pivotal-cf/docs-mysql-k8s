---
title: Release Notes
owner: MySQL
---

These are the release notes for <%= vars.product_full %>.


## <a id="platforms"></a>Supported Platforms

The <%= vars.product_short %> releases support the components listed below:

<table border="1" class="nice">
  <tr>
    <th><%= vars.product_short %> Version</th>
    <th>Percona Server</th>
    <th>Percona XtraBackup</th>
  </tr>
  <tr>
    <td>1.1.0</td>
    <td>8.0.25-15</td>
    <td>8.0.25-17</td>
  </tr>
  <tr>
    <td>1.0.0</td>
    <td>8.0.22–13</td>
    <td>8.0.23–16</td>
  </tr>
</table>

## <a id="1-1-0"></a> Version 1.1.0

**Release Date: August 17, 2021**


### <a id="11_features"></a>Features


* Release 1.1.0 supports MySQL Server 8.0.25. For details on MySQL Server 8.0.25 see [MySQL Release Notes](https://dev.mysql.com/doc/relnotes/mysql/8.0/en/news-8-0-25.html) and [Percona Server Release Nootes](https://www.percona.com/doc/percona-server/LATEST/release-notes/Percona-Server-8.0.25-15.html).
* Release 1.1.0 supports Percona XtraBackup 8.0.25. For details on Percona XtraBackup 8.0.25 see [Percona XtraBackup Release Notes](https://www.percona.com/doc/percona-xtrabackup/LATEST/release-notes/8.0/8.0.25-17.0.html).
* Tanzu MySQL instances are now created with a version number. Users may specify the `spec.version` field in the instance definition to specify which Tanzu MySQL version to deploy. Users can now list instances by version number. For more details, see [List Instances By Version](upgrade-instance.html).
* When installing <%= vars.product_full %>, users can specify a default version for new Tanzu MySQL instances. For more details, see [Installing the Operator](./install-operator.html).
* <%= vars.product_short %> now requires installing Cert Manager before creating or updating new instances. For more details, see [Installing the Operator](./install-operator.html).
* <%= vars.product_short %> instances now expose Prometheus compatible metrics endpoints. Metrics are secured behind a self-signed TLS certificate. For more details see [Monitoring MySQL Instances in Kubernetes](monitoring.html).
* This release supports an additional auto-recovery feature: an HA cluster that loses quorum can now recover its state. 
* Customers can now upgrade from a previous release to a new release. For more information on the process, see [Upgrading MySQL Instances](upgrade-instance.html).
* This release prevents the users from making the following changes:
    - Users are prevented from scaling an HA instance to a single-node instance.
    - This release now displays an error when the user attempts to change the field `storageClassName`.
    - This release now displays an error when the user attempts to reduce `storageSize` on a running MySQL instance.
    - Users are prevented from downgrading MySQL instances to a lower version.


### <a id="11_changes"></a>Changes


- `instanceImage` has been deprecated and removed from the <%= vars.product_short %> Helm chart. This release introduces two new chart values, `registry` and `defaultInstanceVersion`. Users should specify `registry: <my.private-registry>` in their `values-override.yaml`. For more details, see [Installing the Tanzu SQL for Kubernetes Operator](./install-operator.html).
- `imagePullSecret` has been renamed to `imagePullSecretName` for the Helm chart and the MySQL resource, and it's now optional. Users who are maintaining a deployment file for the object should rename the field or drop the field entirely. If omitted, the `imagePullSecretName` will default to the Helm chart setting.
- Users can now alter `spec.storageSize` in a MySQL object to scale up the PV (Persistent Volume), if the underlying storage class supports `onlineVolumeExpansion`. See [Scale storageSize](./update-instance.html#scale-storage). 
- Before installing the Tanzu MySQL operator, this release now requires cert-manager installation. For details, see [Installing the Tanzu SQL for Kubernetes Operator](./install-operator.html).

### <a id="11_resolved"></a>Resolved Issues

* [177801601] - Users are now prevented from scaling down an existing HA cluster to a single node instance. If users set the `spec.highAvailability.enabled` to `false` in a running HA cluster, the operation fails and returns an error. 
* [177369907] - When a user creates a backup with `spec.storageArtifactName`, when the backup starts, the`timeStarted` is now correctly updated.
* [177648443] - The <%= vars.product_short %> Operator now checks that the DNS name resolution is consistent before repairing an offline cluster.
* [177801601] - Scaling down an HA instance to a single node is prevented by the <%= vars.product_short %> Operator. 
* [177069136] - During an HA instance initialization, the proxy container starts only after all Tanzu MySQL HA instances are fully initialized. 


### <a id="11_issues"></a>Known Issues

* **Existing or new 1.0.0 Tanzu MySQL instances require an upgrade**: New Tanzu MySQL 1.0.0 instances, or existing 1.0.0 instances that restart, do not reach a Running state. The 1.1.0 Tanzu MySQL Operator tries to grant permissions to the `performance_schema.keyring_component_status` system table that is introduced in Percona 8.0.25, and does not exist in Percona 8.0.22 and the 1.0.0 instances. As a workaround, upgrade existing 1.0.0 Tanzu MySQL instances to 1.1.0, and avoid creating new 1.0.0 instances.
* **Proxy connection limitation**: The proxy in an HA instance supports up to 100 connection errors from the same source IP. When the limit is reached, the proxy does not process any further connection requests. For a workaround, restart the proxy pod in order to reset the connection error counter. 
* **`imagePullSecretName` required for restores**: MySQLRestore requires `imagePullSecretName` to be provided in the `instanceTemplate`.

### <a id="11_limits"></a>Limitations

* Tanzu MySQL metrics are exposed to a metrics collector that is currently installed inside the Kubernetes cluster.  
* HA instances have no anti-affinity capability, so the pods of an HA instance may be scheduled to the same Kubernetes node.
* Backups are only supported on S3-compatible blobstores that support the S3 ListObjectsV2 API. Notably, Google Cloud Storage (GCS) does not support this API in its S3-compatibility mode.
* To rotate MySQL system account passwords, you must manually restart the pods. For details, see [Rotating MySQL Credentials](./rotating-credentials.html).
* TLS is required for external connections to the database. There is no supported option to disable this requirement.
* Some common operations require an administrator to run `kubectl exec` to access a pod. Some examples are:
   * Checking for an HA instance that is not tolerant to additional members leaving the replication group.
   * Configuring schemas and users for an application.
* Backups are unencrypted. Enable S3 server-side encryption and ensure that the MySQLBackupLocation object is configured with a secure endpoint (`spec.endpoint` should begin with `https://`). For more information about server-side encryption, see the [AWS documentation](https://docs.aws.amazon.com/AmazonS3/latest/userguide/serv-side-encryption.html).


## <a id="1-0-0"></a> Version 1.0.0

**Release Date: April 15, 2021**

This is the first generally available (GA) release of <%= vars.product_full %>.
For an overview of this product, see [About <%= vars.product_short %>](index.html#about-mysql4k8s).

### <a id="10_features"></a>Features

* **MySQL for Kubernetes Operator:** <%= vars.product_full %> implements the Kubernetes Operator pattern
  to provision and manage on-demand Tanzu MySQL instances. <%= vars.product_short %> supports single-node
  MySQL database instances.
  <br><br>For more information about <%= vars.product_short %> features and compatibility, see [Overview](./index.html).
  For information about <%= vars.product_short %> architecture, see [Architecture](architecture.html).
  For more information about the Kubernetes Operator pattern,
  see the [Kubernetes documentation](https://kubernetes.io/docs/concepts/extend-kubernetes/operator/).

* **Installation Using Helm:** Kubernetes admins can use Helm to install the <%= vars.product_short %> Operator.
  This simplifies the installation process while maintaining flexibility in configuration.
  For information about how to install the <%= vars.product_short %> Operator,
  see [Installing the Operator](./install-operator.html).

* **Backup and Restore:** <%= vars.product_short %> automates on-demand and scheduled full physical backups
  using the [Percona XtraBackup](https://www.percona.com/software/mysql-database/percona-xtrabackup) tool.
  It also automates restoring and managing backups. For more information,
  see [Backing Up and Restoring MySQL Instances](backup-restore.html).

* **Sane and Secure Server Defaults:** <%= vars.product_short %> configures MySQL server settings to optimize
  for security and performance. Certain server settings, like `max-connections`, are auto-tuned based on
  the compute resources and persistent storage provisioned for the <%= vars.product_short %> instance.
  <br><br>To see all MySQL server settings configured, follow the procedure in
  [(Optional) Verify MySQL Server Settings](accessing.html#verify-settings).

* **MySQL credential management:** <%= vars.product_short %> uses Kubernetes automation to simplify rotating
  MySQL user credentials. For more information, see [Rotating MySQL Credentials](rotating-credentials.html).

* **High Availability:** Support for creating a high-availability cluster configuration with three members.
  For information, see [Architecture](architecture.html) and 
  [Configuring MySQL Instances for High Availability](high-availability.html).

* **Configure TLS:** TanzuMySQL instances only accept encrypted client connections.
  Users can now configure a TanzuMySQL instance for TLS by creating a TLS Secret.
  For more information, see [Configuring TLS for MySQL Instances](configure-tls.html).

* **Allow off-platform connections:** Users can connect to a TanzuMySQL instance from outside
  the Kubernetes cluster using an external load balancer.
  For more information,
  see [Connect to the MySQL Server with an External IP Address](accessing.html#off-platform-access)
  in _Accessing MySQL Instances_.
  

### <a id="10_issues"></a>Known Issues


* **Upgrades from beta releases are not supported:** Upgrades from beta releases to the <%= vars.product_full %>
  v1.0.0 release are not supported.
  Download and install the latest version.
* **Scaling down an HA instance is not supported**: Creating an HA instance and scaling back to a single pod is not supported and may incur data loss. The <%= vars.product_full %> operator does not prevent you from changing the property, and changing the property will result in unknown behavior.
  If the pods for an HA instance crash while the cluster and its metadata are still being created, the cluster may not recover automatically.
* **Pods may restart when creating a HA instance**: Proxy pods may spontaneously restart while the cluster is being initialized.

### <a id="10_limits"></a>Limitations


* HA instances have no anti-affinity capability, so the pods of an HA instance may be scheduled to the same Kubernetes node.
* Backups are only supported on S3-compatible blobstores that support the S3 ListObjectsV2 API. Notably, Google Cloud Storage (GCS) does not support this API in its S3-compatibility mode.
* Changing `spec.storageSize` in a MySQL object to scale the PersistentVolume is not supported. See [Scale storageSize](./update-instance.html#scale-storage) for a workaround that expands the PersistentVolume.
* To rotate MySQL system account passwords, you must manually restart pods. For details, see [Rotating MySQL Credentials](./rotating-credentials.html).
* TLS is required for external connections to the database. There is no supported option to disable this requirement.
* Some common operations require an administrator to run `kubectl exec` to access a pod. Some examples are:
   * Checking for an HA instance that is not tolerant to additional members leaving the replication group.
   * Configuring schemas and users for an application.
* Backups are unencrypted. Enable S3 server-side encryption and ensure that the MySQLBackupLocation object is configured with a secure endpoint (`spec.endpoint` should begin with `https://`). For more on server-side encryption, see the [AWS documentation](https://docs.aws.amazon.com/AmazonS3/latest/userguide/serv-side-encryption.html).



