---
title: Configuring TLS for MySQL Instances
owner: MySQL
---

<strong><%= modified_date %></strong>

This topic describes how to configure TLS for a MySQL instance.

## <a id='overview'></a>Overview

<%= vars.product_short %> is configured to require an encrypted connection, and
client connections cannot fall back to use an unencrypted connection. By default,
the MySQL server uses a self-signed certificate. Clients can connect to the MySQL server,
but they cannot verify the connection.

To verify the connection to the MySQL server, the MySQL instance can be configured
with a TLS certificate and private key.

To configure a MySQL instance for TLS, you must first create
a TLS Secret in the same namespace as the MySQL instance.
There are several ways to create the Secret.
This topic describes two methods:

* Using the Kubernetes Command Line Interface (kubectl).
  See [Create the TLS Secret Manually](#create-tls-secret) below.
* Using cert-manager.
  See [Create TLS Secret with cert-manager](#using-cert-manager) below.

After creating the secret, you add the name of the secret to your copy of the `mysql.yaml` file,
and configure the instance with the updated file, as described in
[Configure MySQL for TLS](#use-tls) below.

For general information about TLS secrets,
see the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/secret/#tls-secrets).


## <a id='prereq'></a>Prerequisites

Before you configure TLS for a MySQL instance, you must have:

* **Access and permissions to the MySQL instance.**

* **The Kubernetes Command Line Interface (kubectl) installed:**
  For more information,
  see the [Kubernetes documentation](https://kubernetes.io/docs/tasks/tools/install-kubectl/).

## <a id='create-tls-secret'></a>Create the TLS Secret Manually

This procedure describes how to create the TLS Secret using kubectl.
To create the TLS Secret using cert-manager instead,
see [Create TLS Secret with cert-manager](#using-cert-manager) below.

1. Generate a certificate and private key using a certificate manager,
   such as OpenSSL, certstrap, or Let's Encrypt.
   <br><br>
   When creating the certificate, supply the server hostname for the subject alternative names (SANs).
   The server hostname is the DNS name that you use when connecting your app to the MySQL instance:
   + If your apps are deployed in the same Kubernetes cluster as your instance:<br>The hostname is
   `INSTANCE-NAME.DEVELOPMENT-NAMESPACE`, for example, `mysql-sample.my-namespace`.
   + If your app is deployed outside the Kubernetes cluster and you have configured the MySQL `spec.serviceType`
   as `LoadBalancer`:<br>The hostname is the external DNS name of the load balancer.
   See <a href="accessing.html#off-platform-access">Access the MySQL Server from an External IP Address</a>
   in _Accessing MySQL Instances_.

1. Create the TLS Secret by running:

    ```
    kubectl -n DEVELOPMENT-NAMESPACE create secret generic TLS-SECRET-NAME \
      --type kubernetes.io/tls \
      --from-file=tls.crt=PATH-TO-CERTIFICATE \
      --from-file=tls.key=PATH-TO-PRIVATE-KEY \
      --from-file=ca.crt=PATH-TO-CERTIFICATE-AUTHORITY
    ```
    Where:
    + `DEVELOPMENT-NAMESPACE` is the namespace for the MySQL instance.
    + `TLS-SECRET-NAME` is the name you choose for the TLS Secret.
    + `PATH-TO-CERTIFICATE` is the file path to the certificate created in the step above.
    + `PATH-TO-PRIVATE-KEY` is the file path to the private key created in the step above.
    + `PATH-TO-CERTIFICATE-AUTHORITY` is the file path to the certificate authority that signed the certificate.

    For example:

    <pre class="terminal">
      $ kubectl -n my-namespace create secret generic mysql-tls-secret \
          --type kubernetes.io/tls \
          --from-file=tls.crt=/path/server.crt \
          --from-file=tls.key=/path/server.key \
          --from-file=ca.crt=/path/server_ca.crt
    </pre>

After completing the steps above, you add the secret to the instance by following the instructions
in [Configure MySQL for TLS](#use-tls) below.

## <a id='using-cert-manager'></a>Create TLS Secret with cert-manager

This procedure describes how to create the TLS Secret using cert-manager.

To create the TLS Secret through the kubectl instead,
see [Create the TLS Secret Manually](#create-tls-secret) above.


1. If you have not installed cert-manager on your Kubernetes cluster during the [Installing the Tanzu SQL for Kubernetes Operator - Prerequisites](install-operator.html#prereq), install it by running these commands:

    ```
    kubectl create namespace cert-manager
    helm repo add jetstack https://charts.jetstack.io
    helm repo update
    helm install cert-manager jetstack/cert-manager \
    --namespace cert-manager --version v1.0.2 --set installCRDs=true
    ```

2. Use cert-manager to create either a cluster-wide `ClusterIssuer` resource or a namespace-local `Issuer` resource
   in the same namespace as your MySQL instance.

    For information about the `Issuer` types, see the [cert-manager
    documentation](https://cert-manager.io/docs/configuration/).

    <p class="note">
       <strong>Note:</strong> Because the MySQL instance requires that the TLS secret include the <code>ca.crt</code> key,
               VMware does not recommend the ACME Issuer.
    </p>

3.  Choose and record a name for the TLS secret name, for example, `mysql-tls-secret`.
    Use this name as the `spec.secretName` when you create the `Certificate` resource below.

1.  Create a certificate request YAML.
    For instructions, see the [cert-manager documentation](https://cert-manager.io/docs/usage/certificate/#creating-certificate-resources).
    The following table suggests values for the YAML parameters.
    <table class="nice">
    <col width="70%">
    <col width="30%">
      <th>Enter:</th>
      <th>As this parameter in the YAML:</th>
      <tr>
        <td>your TLS secret name from step 3 above, for example, <code>mysql-tls-secret</code></td>
        <td><code>spec.secretName</code></td>
      </tr>
      <tr>
        <td>the name of your <code>ClusterIssuer</code> or <code>Issuer</code>
                        created in step 2 above</td>
        <td><code>spec.issuerRef.name</code></td>
      </tr>
      <tr>
        <td>
                        the DNS name or the fully qualified DNS name
                        that you use to connect to apps deployed in the same Kubernetes cluster
                        as the MySQL instance:
                        <ul>
                          <li><code>INSTANCE-NAME.DEVELOPMENT-NAMESPACE</code>, for example,
                             <code>mysql-sample.my-namespace</code></li>
                          <li><code>INSTANCE-NAME.DEVELOPMENT-NAMESPACE.svc.CLUSTER-DOMAIN</code>,
                              for example, <code>mysql-sample.my-namespace.svc.cluster.local</code><br>.
                              The default <code>CLUSTER-DOMAIN</code> is <code>cluster.local</code>.
                          </li>
                         </ul>
                    </td>
        <td><code>spec.dnsNames</code></td>
      </tr>
      <tr>
        <td>
                        the external IP address of the load balancer
                        that you use to connect to apps deployed outside the cluster.
                        To find the address,
                        see step 4 of <a href="accessing.html#off-platform-access">Access
                        the MySQL Server from an External IP Address</a>.
                    </td>
        <td><code>spec.ipAddresses</code></td>
      </tr>
      <tr>
        <td>any additional DNS names that clients use to access the MySQL instance through a TLS connection</td>
        <td><code>spec.dnsNames</code></td>
      </tr>
      <tr>
        <td>any additional URIs that clients use to access the MySQL instance
                       through a TLS connection you might have configured to access your MySQL </td>
        <td><code>spec.uris</code></td>
      </tr>
      <tr>
        <td>any additional IP addresses that clients use to
                        access the MySQL instance through a TLS connection</td>
        <td><code>spec.ipAddresses</code></td>
      </tr>
    </table><br>

    For information about troubleshooting certificate creation,
    see the [cert-manager documentation](https://cert-manager.io/docs/faq/troubleshooting/).

1. Verify that the TLS secret created has the `ca.crt` key by running:

    ```
    kubectl -n DEVELOPMENT-NAMESPACE get secret TLS-SECRET-NAME -o jsonpath="{.data['ca\.crt']}"
    ```

    Where:
    * `DEVELOPMENT-NAMESPACE` is the namespace for the MySQL instance.
    * `TLS-SECRET-NAME` is the name you chose for the TLS Secret.

    For example:

    <pre class="terminal">$ kubectl -n my-namespace get secret mysql-tls-secret -o jsonpath="{.data['ca\.crt']}"  </pre>



## <a id='use-tls'></a>Configure MySQL for TLS

To configure TLS for the MySQL instance:

1. In your copy of the `mysql.yaml` for the MySQL instance, specify `spec.tls.secret.name` as the name
of the TLS Secret created in the namespace.

2. Create or update the MySQL instance by running:

    ```
    kubectl apply -f FILENAME -n DEVELOPMENT-NAMESPACE
    ```
    Where:
    +  `FILENAME` is the name of the configuration file for your MySQL resource.
    +  `DEVELOPMENT-NAMESPACE` is the namespace for the MySQL instance.



## <a id='use-tls'></a>Connect to a Load-Balanced MySQL Instance over TLS

This section shows how to connect to a MySQL instance configured with a load
balancing service, `spec.serviceType.LoadBalancer`, from an off-cluster machine
running the MySQL command-line client.

In the procedure below, you give the client the certificate of the CA that signed the MySQL TLS certificate.
The client uses this CA to authenticate the MySQL server-provided TLS certificate.

To connect the MySQL command-line client to the MySQL instance over TLS:

1. Obtain the certificate of the CA that signed the MySQL server's TLS certificate.

    The CA certificate is stored in the TLS secrets `ca.crt` field, base64 encoded.
    Save that certificate to a local file ca.crt by running:

    ```
    kubectl -n DEVELOPMENT-NAMESPACE get secret TLS-SECRET-NAME -o jsonpath="{.data['ca\.crt']}" | base64 -d > ca.crt
    ```

    For example:

    <pre class="terminal">
    $ kubectl -n my-namespace get secret mysql-tls-secret -o jsonpath="{.data['ca\.crt']}" | base64 -d > ca.crt
    </pre>

2. Create a MySQL username and password to test your connection with.
   You need to connect as a non-root user because MySQL instances prohibit root connection from remote machines.

    For an example of creating a database, user, and password for connection testing,
    see [Connecting Apps to MySQL Instances](connecting-apps.html#create-app-db).

3. Obtain the IP address that your MySQL instance is listening on for connections.
  Load-balanced instances expose their IP address through their `status.loadBalancer.ingress` property:

    ```
    kubectl get service INSTANCE-NAME -o jsonpath={.status.loadBalancer.ingress[].ip}
    ```

1. Connect your local MySQL command-line client to your MySQL instance by running:

    ```
mysql -u USERNAME -pPASSWORD -h IP_ADDRESS --ssl-mode=VERIFY_CA --ssl-ca=CA-CERTPATH
    ```

    Where:
    * `USERNAME` is the username you created above, for example, `bn_wordpress`.
    * `PASSWORD` is the password for the user you created above, for example, `hunter2`.
    * `IP-ADDRESS` is the external IP address from step 3 above.
    * `CA-CERTPATH` is the pathname to the certificate file saved in step 1 above, for example, `./ca.crt`.

    For example:

    <pre class="terminal">
$ mysql -u bn_wordpress -phunter2 -h 192.168.64.200 --ssl-mode=VERIFY_CA --ssl-ca=./ca.crt <br>
mysql: [Warning] Using a password on the command line interface can be insecure.
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 7
...
Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.<br>
mysql>
    </pre>
